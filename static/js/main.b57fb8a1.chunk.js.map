{"version":3,"sources":["components/Time.js","components/Actions.js","components/Laps.js","App.js","serviceWorker.js","index.js"],"names":["Time","className","this","props","time","Component","Actions","start","timerState","onClick","startTimer","disabled","lap","pause","pauseTimer","stop","stopTimer","Laps","a","b","laps","sort","compare","map","i","key","formatTime","App","state","formattedTime","bind","timer","setInterval","setState","console","log","clearInterval","push","secs","date","Date","setSeconds","toISOString","substr","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b57fb8a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Time extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"time-view\">\r\n        <div className=\"time\">{this.props.time}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Time;","import React, { Component } from 'react';\r\n\r\nexport class Actions extends Component {\r\n  render() {\r\n\r\n    let start = (this.props.timerState !== 'running')\r\n      ? <button className=\"start\" onClick={this.props.startTimer}>Start</button>\r\n      : <button className=\"start\" disabled>Start</button>;\r\n    let lap = (this.props.timerState === 'running')\r\n      ? <button className=\"lap\" onClick={this.props.lap}>Lap</button>\r\n      : <button className=\"lap\" disabled>Lap</button>\r\n    let pause = (this.props.timerState === 'running')\r\n      ? <button className=\"pause\" onClick={this.props.pauseTimer}>Pause</button>\r\n      : <button className=\"pause\" disabled>Pause</button>\r\n    let stop = (this.props.timerState !== 'stopped')\r\n      ? <button className=\"stop\" onClick={this.props.stopTimer}>Stop</button>\r\n      : <button className=\"stop\" disabled>Stop</button>\r\n    return (\r\n      <div>\r\n        {start}\r\n        {lap}\r\n        {pause}\r\n        {stop}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Actions;","import React, { Component } from 'react';\r\n\r\nexport class Laps extends Component {\r\n  compare (a, b) {\r\n    return a - b;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"laps\">\r\n        {this.props.laps.sort(this.compare).map((lap, i) => (\r\n          <div className=\"lap\" key={i}>{this.props.formatTime(lap)}</div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Laps;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Time from './components/Time';\r\nimport Actions from './components/Actions';\r\nimport Laps from './components/Laps';\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n\r\n    this.state = {\r\n      time: 0,\r\n      formattedTime: \"00:00:00\",\r\n      timerState: \"stopped\",\r\n      laps: [],\r\n      lap: 0\r\n    }\r\n\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.pauseTimer = this.pauseTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.lap = this.lap.bind(this);\r\n  }\r\n\r\n  startTimer () {\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        time: this.state.time + 1,\r\n        formattedTime: this.formatTime(this.state.time + 1),\r\n        timerState: \"running\"\r\n      });\r\n    }, 1000);\r\n    \r\n    console.log(\"Timer has started...\");\r\n  }\r\n\r\n  pauseTimer () {\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      timerState: 'paused'\r\n    });\r\n  }\r\n\r\n  stopTimer () {\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      time: 0,\r\n      formattedTime: \"00:00:00\",\r\n      timerState: \"stopped\"\r\n    });\r\n\r\n    console.log(\"Timer has stopped.\");\r\n  }\r\n\r\n  lap () {\r\n    let laps = this.state.laps;\r\n    laps.push(this.state.time);\r\n    this.setState({\r\n      lap: this.state.time,\r\n      laps: laps\r\n    });\r\n\r\n    console.log(\"Lapped, \", this.state.lap);\r\n  }\r\n\r\n  formatTime (secs) {\r\n    let date = new Date(null);\r\n    date.setSeconds(secs);\r\n    let formattedTime = date.toISOString().substr(11, 8);\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h3>Timer<span>app</span></h3>\r\n        </header>\r\n        <Time time={this.state.formattedTime} />\r\n        <Actions\r\n          timerState={this.state.timerState}\r\n          startTimer={this.startTimer}\r\n          pauseTimer={this.pauseTimer}\r\n          stopTimer={this.stopTimer}\r\n          lap={this.lap}\r\n        />\r\n        <Laps laps={this.state.laps} formatTime={this.formatTime} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}